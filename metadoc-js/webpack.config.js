const path = require('path')
const merge = require("webpack-merge")
// Load the config generated by scalajs-bundler
const config = require('./scalajs.webpack.config')

const HtmlWebpackPlugin = require('html-webpack-plugin');
const MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const RootDir = path.resolve(__dirname, '../../../..')
const ResourcesDir = path.resolve(RootDir, 'src/main/resources')
const MonacoEditorBaseDir = path.resolve(__dirname, 'node_modules/monaco-editor/min')

const DevMode = process.env.NODE_ENV !== 'production'

module.exports = merge(config, {
  mode: DevMode ? 'development' : 'production',
  entry: {
    'index': path.resolve(ResourcesDir, 'index.js')
  },
  resolve: {
    alias: {
      'resources': ResourcesDir,
      'node_modules': path.resolve(__dirname, 'node_modules')
    }
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        loader: 'ts-loader?' + JSON.stringify({
          compilerOptions: {
            // Override tsconfig.json to enable import of the monaco types in scala.ts
            baseUrl: MonacoEditorBaseDir
          }
        })
      },
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          DevMode ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader'
        ],
      },
      {
        test: /\.(jpe?g|png|gif|svg)$/i,
        loaders: [
          'file-loader?hash=sha512&digest=hex&name=assets/[hash].[ext]',
          'image-webpack-loader?bypassOnDebug'
        ]
      },
      { test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader?name=assets/[name].[hash].[ext]' },
      { test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader?name=assets/[name].[hash].[ext]' },
      { test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file-loader?name=assets/[name].[hash].[ext]' },
    ]
  },
  plugins: [
    new MonacoWebpackPlugin({ languages: [] }),
    new MiniCssExtractPlugin({
      filename: DevMode ? '[name].css' : '[name].[hash].css',
      chunkFilename: DevMode ? '[id].css' : '[id].[hash].css',
    }),
    new HtmlWebpackPlugin({
      inject: true,
      favicon: ResourcesDir + '/images/favicon.png',
      template: ResourcesDir + '/index.html',
      minify: {
        collapseWhitespace: true
      }
    })
  ],
  devServer: {
    contentBase: [
      __dirname,
      path.resolve(RootDir, '../target/metadoc')
    ]
  }
});
